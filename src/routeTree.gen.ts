/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as TypescriptIndexImport } from './routes/typescript/index'
import { Route as ReactIndexImport } from './routes/react/index'
import { Route as JavascriptIndexImport } from './routes/javascript/index'
import { Route as TypescriptConstReadOnlyImport } from './routes/typescript/const-read-only'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TypescriptIndexRoute = TypescriptIndexImport.update({
  id: '/typescript/',
  path: '/typescript/',
  getParentRoute: () => rootRoute,
} as any)

const ReactIndexRoute = ReactIndexImport.update({
  id: '/react/',
  path: '/react/',
  getParentRoute: () => rootRoute,
} as any)

const JavascriptIndexRoute = JavascriptIndexImport.update({
  id: '/javascript/',
  path: '/javascript/',
  getParentRoute: () => rootRoute,
} as any)

const TypescriptConstReadOnlyRoute = TypescriptConstReadOnlyImport.update({
  id: '/typescript/const-read-only',
  path: '/typescript/const-read-only',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/typescript/const-read-only': {
      id: '/typescript/const-read-only'
      path: '/typescript/const-read-only'
      fullPath: '/typescript/const-read-only'
      preLoaderRoute: typeof TypescriptConstReadOnlyImport
      parentRoute: typeof rootRoute
    }
    '/javascript/': {
      id: '/javascript/'
      path: '/javascript'
      fullPath: '/javascript'
      preLoaderRoute: typeof JavascriptIndexImport
      parentRoute: typeof rootRoute
    }
    '/react/': {
      id: '/react/'
      path: '/react'
      fullPath: '/react'
      preLoaderRoute: typeof ReactIndexImport
      parentRoute: typeof rootRoute
    }
    '/typescript/': {
      id: '/typescript/'
      path: '/typescript'
      fullPath: '/typescript'
      preLoaderRoute: typeof TypescriptIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/typescript/const-read-only': typeof TypescriptConstReadOnlyRoute
  '/javascript': typeof JavascriptIndexRoute
  '/react': typeof ReactIndexRoute
  '/typescript': typeof TypescriptIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/typescript/const-read-only': typeof TypescriptConstReadOnlyRoute
  '/javascript': typeof JavascriptIndexRoute
  '/react': typeof ReactIndexRoute
  '/typescript': typeof TypescriptIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/typescript/const-read-only': typeof TypescriptConstReadOnlyRoute
  '/javascript/': typeof JavascriptIndexRoute
  '/react/': typeof ReactIndexRoute
  '/typescript/': typeof TypescriptIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/typescript/const-read-only'
    | '/javascript'
    | '/react'
    | '/typescript'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/typescript/const-read-only'
    | '/javascript'
    | '/react'
    | '/typescript'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/typescript/const-read-only'
    | '/javascript/'
    | '/react/'
    | '/typescript/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  TypescriptConstReadOnlyRoute: typeof TypescriptConstReadOnlyRoute
  JavascriptIndexRoute: typeof JavascriptIndexRoute
  ReactIndexRoute: typeof ReactIndexRoute
  TypescriptIndexRoute: typeof TypescriptIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  TypescriptConstReadOnlyRoute: TypescriptConstReadOnlyRoute,
  JavascriptIndexRoute: JavascriptIndexRoute,
  ReactIndexRoute: ReactIndexRoute,
  TypescriptIndexRoute: TypescriptIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/typescript/const-read-only",
        "/javascript/",
        "/react/",
        "/typescript/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/typescript/const-read-only": {
      "filePath": "typescript/const-read-only.tsx"
    },
    "/javascript/": {
      "filePath": "javascript/index.tsx"
    },
    "/react/": {
      "filePath": "react/index.tsx"
    },
    "/typescript/": {
      "filePath": "typescript/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
